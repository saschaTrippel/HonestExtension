// Use the 'geolocation' permission to track users geolocation

/**
 * Save the geolocation information provided by position argument.
 *
 * @param position Geolocation information generated by geolocation.getCurrentPosition
 */
async function saveGeolocation(position) {
	console.info("Saving geolocation");
	const storage = await browser.storage.local.get();
	let geolocations = [];
	if (Object.keys(storage).includes("geolocations")) {
		geolocations = storage.geolocations;
	}

	geolocations.push({
		latitude: position.coords.latitude,
		longitude: position.coords.longitude,
		accuracy: position.coords.accuracy,
		timestamp: position.timestamp
	});
	browser.storage.local.set({geolocations});
}

function error() {
	console.error("Error while getting geoposition");
}

function getGeolocation() {
	navigator.geolocation.getCurrentPosition(saveGeolocation, error);
}

let intervalGeolocationId;
let activeGeolocation = false;
/**
 * Activate geolocation tracker if 'geolocation' permission is given.
 */
async function activateGeolocation() {
	if (await hasPermissions(["geolocation"])) {
		getGeolocation();
		// Try to save geolocation every 10 minutes (10 * 60 * 1000 milliseconds)
		intervalGeolocationId = setInterval(getGeolocation, 600000);
		activeGeolocation = true;
		console.log("Activated geolocation tracker");
	}
}

/**
 * Deactivate geolocation tracker if it is active.
 */
function deactivateGeolocation() {
	if (activeGeolocation) {
		clearInterval(intervalGeolocationId);
		activeGeolocation = false;
		console.log("Deactivated geolocation tracker");
	}
}
