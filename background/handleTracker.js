/**
 * Configure content scripts that can be dynamically registered.
 *
 * @param changes Changes generated by storage.local.onChanged event
 */
function listener(changes) {
	// Listen for changes in the local storage
	// Activate / deactivate trackers defined below accordingly

	// ### Trackers ###
	const trackers = [
		// browsing history tracker
		{	trackerScript: {
			id: "browsing-history-tracker",
			matches: ["<all_urls>"],
			js: ["content/history-tracker.js"],
			persistAcrossSessions: false,
			allFrames: true,
		},
			permissions : ["<all_urls>"]
		},

		// password tracker
		{	trackerScript: {
			id: "password-tracker",
			matches: ["<all_urls>"],
			js: ["content/password-tracker.js"],
			persistAcrossSessions: false,
			allFrames: true,
		},
			permissions : ["<all_urls>"]
		}
	];
	// ### End trackers ###
	
	// If the active value has changed, start / stop trackers
	if (Object.keys(changes).includes("active")) {
		console.info("Active status has changed to: " + changes.active.newValue);
		if (changes.active.newValue) {
			activate(trackers);
		} else {
			deactivate(trackers);
		}
	}

	// If permissions have changed, reconfigure trackers accordingly
	if (Object.keys(changes).includes("permissions")) {
		deactivate(trackers);
		activate(trackers);
	}
}

/**
 * Activate background scripts.
 * Calls the activate function of each background tracker.
 */
function activateBackground() {
	// If you add trackers as background scripts,
	// add their activation function here
	activateTabs();
	activateBookmarks();
	activateGeolocation();
	activateWebNavigation();
	activateWebRequest();
	activateManagement();
	activateCookies();
	activateDownloads();
	activateClipboard();
}

/**
 * Registers content scripts if their specified permissions are given.
 */
async function activate(trackers) {
	if (! await isActive()){
		return;
	}

	activateBackground();

	for (let tracker of trackers) {
		// If all required permissions are active, activate tracker
		if (await hasPermissions(tracker.permissions)) {
			try {
				await browser.scripting.registerContentScripts([tracker.trackerScript]);
				console.log('Activated tracker ' + tracker.trackerScript.id);
			} catch (error) {
				console.log("Unable to start tracker " + tracker.trackerScript.id);
			}
		}
	}
}

/**
 * Deactivate tracker implemented as background scripts.
 * Calls the deactivate function implemented by the scripts.
 */
function deactivateBackground() {
	// If you add trackers as background script,
	// add their deactivation function here
	deactivateTabs();
	deactivateBookmarks();
	deactivateGeolocation();
	deactivateWebNavigation();
	deactivateWebRequest();
	deactivateManagement();
	deactivateCookies();
	deactivateDownloads();
	deactivateClipboard();
}

/**
 * Unregister tracker implemented as content scripts.
 */
async function deactivate(trackers) {
	deactivateBackground();

	for (let tracker of trackers) {
		try {
			await browser.scripting.unregisterContentScripts({
				ids: [tracker.trackerScript.id]
			});
			console.log('Deactivated ' + tracker.trackerScript.id);
		} catch (error) {
		}
	}
}

browser.storage.local.onChanged.addListener(listener);
